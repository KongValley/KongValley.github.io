[{"title":"🐹MACD指标入门（一）","path":"/2023/08/28/shares-collection/macd-1/","content":"什么是 MACD","tags":["股票入门","MACD指标"],"categories":["股市基础技能"]},{"title":"☁️Hexo+CloudBase+腾讯云CDN","path":"/2021/08/14/how-to-build-a-blog-site/Hexo-CloudBase-CDN/","content":"开坑","tags":["Hexo","CDN"],"categories":["Build Blog"]},{"title":"🌈TypeScript + Webpack","path":"/2020/02/07/typescript/typescript-webpack/","content":"Install Typescript1npm i typescript -S Install Webpack安装下本地开发三件套 1npm i webpack webpack-cli webpack-dev-server -D Install Plugins1npm i ts-loader clean-webpack-plugin html-webpack-plugin -D Add config file新建 build 文件夹，在文件夹里新建 webpack.config.js 1234567891011121314151617181920212223242526272829303132333435363738const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;)module.exports = &#123; entry: &quot;./src/index.ts&quot;, // 指定入口文件 output: &#123; filename: &quot;main.js&quot; // 指定输出文件 &#125;, resolve: &#123; extensions: [ &quot;.ts&quot;, &quot;.tsx&quot;, &quot;.js&quot; ] &#125;, module: &#123; rules: [&#123; test: /\\.tsx?$/, // 匹配ts文件 use: &#x27;ts-loader&#x27;, exclude: /node_modules/ // 除外 node_modules 目录 &#125;] &#125;, devtool: process.env.NODE_ENV === &#x27;production&#x27; ? false : &#x27;source-map&#x27;, // 如果是生产环境不输出 source map，如果是开发环境生成 source map devServer: &#123; contentBase: &#x27;./dist&#x27;, // 告诉服务器从哪个目录中提供内容 stats: &#x27;errors-only&#x27;, // 只显示编译过程中错误信息 compress: false, // 不启用 gzip 压缩 host: &#x27;localhost&#x27;, // 地址 port: &#x27;8086&#x27; // 端口 &#125;, plugins: [ new CleanWebpackPlugin(&#123; cleanOnceBeforeBuildPatterns: [&#x27;./dist&#x27;] // 每次打包前清理 dist 目录 &#125;), new HtmlWebpackPlugin(&#123; template: &#x27;./src/template/index.html&#x27; // 作为模版 html &#125;) ]&#125;; Install cross-env1npm i cross-env -D 用来给 package.json 里的 script 添加参数 12345&#123; &quot;script&quot;: &#123; &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --config ./build/webpack.config.js&quot; &#125;&#125; 这样我们就可以用 process.env.NODE_ENV 接受到 development 这个值。在开发中我们一般用 development 和 production 来针对开发环境和生产环境进行不同配置。接下来在 webpack.config.js 内写入以下内容","tags":["TypeScript Basic"],"categories":["TypeScript"]},{"title":"😗Symbol in TypeScript","path":"/2020/02/02/typescript/typescript-symbol/","content":"Web Bookmark MDN上的Symbol介绍 基础特性1.唯一性 123const s1 = Symbol(&#x27;Sym&#x27;)const s2 = Symbol(&#x27;Sym&#x27;)console.log(s1 === s2); // 永远返回 false 2.不支持 new 1new Symbol() // TypeError: Symbol is not a constructor 3.不会隐式转换 12const sym = Symbol(&#x27;Sym&#x27;)alert(sym) // TypeError: Cannot convert a Symbol value to a string 4.参数只用来作为描述 12const sym = Symbol(&#x27;Sym&#x27;)console.log(sym.description) // Sym 5.目的：用来作为属性名 1234567let prop = &#x27;name&#x27;;const info = &#123; [prop]: &#x27;symbol test&#x27;&#125;;console.log(info);","tags":["TypeScript Basic"],"categories":["TypeScript"]},{"title":"🛸自用代码提交格式","path":"/2020/01/20/tool/自用代码提交格式/","content":"Web Bookmark GitHub 支持的 Emoji 列表 Emoji 搜索 Commit Title🎨 :art:改进代码的结构&#x2F;格式。 ⚡ :zap:提高性能。 🔥 :fire:移除代码&#x2F;文件。 🐛 :bug:修复bug。 🚑 :ambulance:重要修复。 ✨ :sparkles:增加新功能。 📝 :pencil:编写文档。 🚀 :rocket:部署项目。 💄 :lipstick:更新UI样式。 🎉 :tada:初始化提交。 ✅ :white_check_mark:更新测试例。 🔒 :lock:修复安全相关issues.","tags":["commit message"],"categories":["Tool"]},{"title":"🌈TypeScript 基础类型","path":"/2020/01/17/typescript/typescript基础类型/","content":"Web Bookmark GitHub仓库：基础类型 Number123456/* 数字类型-------------------------- */const binaryNumber: number = 0b1010const octalNumber: number = 0o1721const decimalNumber: number = 45const hexNumber: number = 0x1e3c String123/* 字符串类型-------------------------- */const string: string = &#x27;123Hello&#x27; Boolean1234/* 布尔类型-------------------------- */const success: boolean = trueconst faile: boolean = false Array123456789/* 数组类型-------------------------- */const numberArr: number[] = [2333]const stringArr: string[] = [&#x27;Apple&#x27;, &#x27;Banana&#x27;]/* 使用数组泛型-------------------------- */const otherNameArr: Array&lt;number&gt; = [1, 2, 3]const doubleTypeArr: (string | number)[] = [123, &#x27;Apple&#x27;] Object123456789101112131415/* object 类型-------------------------- */let obj = &#123; name: &#x27;chara&#x27;&#125;let obj2 = objobj2.name = &#x27;C&#x27;console.log(obj);function getObject(obj: object): void &#123; console.log(obj)&#125;getObject(obj2) Any12345678/* any 类型-------------------------- */let anyValue: any = 123anyValue = &#x27;abc&#x27;anyValue = falseconst anyArr: any[] = [1, &#x27;a&#x27;] Undefined123/* undefined 类型，是其他类型的子类型-------------------------- */const u: undefined = undefined Never12345678910111213141516171819202122/* never 类型-------------------------- */const errorMessage = (message: string): never =&gt; &#123; throw new Error(message)&#125;const infiniteFunc = (): never =&gt; &#123; while(true) &#123;&#125;&#125;/* never 类型是任何类型的子类型，可以赋值给任何类型-------------------------- */const neverVariable = (() =&gt; &#123; while(true) &#123;&#125;&#125;)()let num: number = 5num = neverVariable/* 没有类型是 never 的子类型或可以赋值给 never 类型（除了 never 本身） * 即使 any 类型也不可以赋值给 never 类型-------------------------- */ Null123/* null 类型，是其他类型的子类型-------------------------- */const n: null = null Enum1234567891011/* 枚举类型-------------------------- */enum Roles &#123; SUPER_ADMIN, ADMIN = 4, USER&#125;console.log(Roles.SUPER_ADMIN)console.log(Roles[4]) Tuple123/* 元组类型-------------------------- */const tuple: [string, number, boolean] = [&#x27;a&#x27;, 1, true] void12345678910/* void 类型-------------------------- */const consoleText = (text: string): void =&gt; &#123; console.log(text)&#125;// void 类型的变量可以赋值为 undefined 和 nulllet voidVal = undefinedvoidVal = null Type Assertion123456789101112131415/* 类型断言-------------------------- */const getLength = (target: string | number): number =&gt; &#123; if((&lt;string&gt;target).length || (target as string).length === 0) &#123; return (&lt;string&gt;target).length &#125; else &#123; return target.toString().length &#125;&#125;getLength(123)getLength(&#x27;Apple&#x27;)/* 可以使用自定义类型保护来简化-------------------------- */","tags":["TypeScript Basic"],"categories":["TypeScript"]},{"title":"🚀PowerShell自用","path":"/2020/01/17/tool/PowerShell自用/","content":"Install PowerShell PreviewWindows 用户我个人推荐使用 choco 安装 PowerShell Preview，方便快捷，需要使用管理员权限执行安装命令。 安装 oh-my-posh给 PowerShell 权限去执行任意脚本 1Set-ExecutionPolicy Bypass 安装 posh-git 1Install-Module posh-git -Scope CurrentUser 安装 oh-my-posh 1Install-Module oh-my-posh -Scope CurrentUser 写入到配置文件先获取文件路径 这个文件不存在的话就新建一个，写入以下内容： 123Import-Module posh-gitImport-Module oh-my-poshSet-Theme Sorin","tags":["PowerShell"],"categories":["Tool"]},{"title":"🔧Windows 实用工具","path":"/2020/01/17/tool/Windows实用工具/","content":"Web Bookmark Chocolatey Windows上更方便的软件管理工具 FluentTerminal 终端工具 Notion 多端笔记工具 Other Notes🚀PowerShell自用","tags":["Windows"],"categories":["Tool"]},{"title":"🍟Hexo中使用markdown-it拓展","path":"/2020/01/10/tool/Hexo中使用markdown-it拓展/","content":"Web BookmarkHexo + yilia 替换渲染引擎，支持 emoji 表情 Hexo Markdown 拓展 Emoji 表情列表 Hexo 中添加 emoji 表情 Markdown-it-emoji 源码分析 To do it首先卸载hexo默认的markdown渲染工具 1npm uninstall hexo-renderer-marked --save 安装 markdown-it 1npm install hexo-renderer-markdown-it --save 安装 markdown-it-emoji 1npm install markdown-it-emoji --save 在站点的_config.yml文件里添加以下内容: 123456789101112131415161718192021222324# markdown-itmarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: &#x27;“”‘’&#x27; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-emoji anchors: level: 2 collisionSuffix: &#x27;k&#x27; permalink: true permalinkClass: &#x27;header-anchor&#x27; permalinkSymbol: &#x27;¶&#x27; case: 0 separator: &#x27;-&#x27; 这些配置项说明可以在markdownn-it wiki上查看 Then由于渲染还是不够完美，有些 emoji 会被解析为 Unicode 字符，所以再安装 twemoji 1npm install twemoji --save 安装完之后，需要对 markdown-it-emoji 源码进行编辑，使它使用 twemoji 进行渲染 123456789101112131415161718192021222324252627282930&#x27;use strict&#x27;;var emojies_defs = require(&#x27;./lib/data/full.json&#x27;);var emojies_shortcuts = require(&#x27;./lib/data/shortcuts&#x27;);var emoji_html = require(&#x27;./lib/render&#x27;);var emoji_replace = require(&#x27;./lib/replace&#x27;);var normalize_opts = require(&#x27;./lib/normalize_opts&#x27;);var twemoji = require(&#x27;twemoji&#x27;) // 引入twemojimodule.exports = function emoji_plugin(md, options) &#123; var defaults = &#123; defs: emojies_defs, shortcuts: emojies_shortcuts, enabled: [] &#125;; var opts = normalize_opts(md.utils.assign(&#123;&#125;, defaults, options || &#123;&#125;)); md.renderer.rules.emoji = emoji_html; md.renderer.rules.emoji = function(token, idx) &#123; return twemoji.parse(token[idx].content); &#125;; // 使用 twemoji 进行渲染 md.core.ruler.push(&#x27;emoji&#x27;, emoji_replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));&#125;; 由于 twemoji 渲染后，emoji 都为图片，所以我们需要对它们的样式进行下设置 12345678910img.emoji &#123; height: 1em; width: 1em; margin: 0 .05em 0 .1em !important; box-shadow: none; vertical-align: -0.1em; padding:0px !important; border:none !important; display:inline !important;&#125; But我们也可以使用系统支持的原生 Emoji 去解析那些转成了 Unicode 的字符，我们对 markdown-it-emoji 源码再修改下 12345678910111213141516171819202122232425262728&#x27;use strict&#x27;;var emojies_defs = require(&#x27;./lib/data/full.json&#x27;);var emojies_shortcuts = require(&#x27;./lib/data/shortcuts&#x27;);var emoji_html = require(&#x27;./lib/render&#x27;);var emoji_replace = require(&#x27;./lib/replace&#x27;);var normalize_opts = require(&#x27;./lib/normalize_opts&#x27;);module.exports = function emoji_plugin(md, options) &#123; var defaults = &#123; defs: emojies_defs, shortcuts: emojies_shortcuts, enabled: [] &#125;; var opts = normalize_opts(md.utils.assign(&#123;&#125;, defaults, options || &#123;&#125;)); md.renderer.rules.emoji = emoji_html; md.renderer.rules.emoji = function(token, idx) &#123; return &#x27;&lt;g-emoji&gt;&#x27;+ token[idx].content +&#x27;&lt;/g-emoji&gt;&#x27;; &#125;;// 添加 g-emoji 容器进行包裹 md.core.ruler.push(&#x27;emoji&#x27;, emoji_replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));&#125;; 添加样式 12345678g-emoji &#123; font-family: Apple Color Emoji,Segoe UI,Segoe UI Emoji,Segoe UI Symbol; font-size: 1.2em; font-style: normal!important; font-weight: 400; line-height: 20px; vertical-align: middle;&#125; Test1:label: :label: 1:tada: :tada:","tags":["hexo","markdown-it"],"categories":["Build Blog"]},{"title":"🦄TypeScript入门","path":"/2020/01/09/typescript/typescript入门/","content":"简介 从 npm 包的下载量就可以看出 TypeScript 已经逐渐成为前端必不可少的工具了，都2020年了，再不学，就只能2021年学了🤣 Quick Start 🦄TypeScript 入门 Base 🌈TypeScript + Webpack 🌈TypeScript 基础类型 Web BookmarkGitHub仓库：基础类型 Your Environment💡你需要做的准备： Node.js &gt; 8.0，最好是最新的稳定版 一个包管理工具 npm 或者 yarn 一个文本编辑器或者 IDE Install TypeScript1npm install TypeScript -g Init Project先创建下目录 1mkdir ts-study &amp;&amp; cd ts-study 再创建 src 目录（一般用来存放项目代码） 1mkdir src &amp;&amp; touch src/index.ts 注意： 如果你的系统是Windows的话，touch并不会生效，你可以用New-Item来代替touch，查看相关issue 1New-Alias touch New-Item 初始化项目 package.json 1npm init 初始化 ts 配置文件 1tsc --init VSCode Auto Compile在终端下拉菜单中选择运行任务 选择tsc:监视（当你的文件发生改动时会自动编译）","tags":["TypeScript Basic"],"categories":["TypeScript"]},{"title":"🤙Hexo引入Mermaid","path":"/2020/01/08/tool/Hexo引入mermaid/","content":"Web Bookmark Mermaid 与 HighlightJs 的 issue Fix the bug12345678910111213141516&lt;script&gt; // using prism var mermaids = document.getElementsByClassName(&#x27;language-mermaid&#x27;); while(mermaids.length &gt; 0) &#123; mermaids[0].className = &#x27;mermaid&#x27;; &#125; // using highlight var mermaids = []; [].push.apply(mermaids, document.getElementsByClassName(&#x27;mermaid&#x27;)); for (i = 0; i &lt; mermaids.length; i++) &#123; mermaids[i].className = &#x27;nohighlight mermaid&#x27;; &#125;&lt;/script&gt;&lt;script src=&quot;mermaid.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;mermaid.initialize(&#123;startOnLoad:true&#125;);&lt;/script&gt;` 这样就能愉快的使用 mermaid 了 渲染图","tags":["Hexo","Mermaid"],"categories":["Build Blog"]},{"title":"🎵 Hexo 外链播放器","path":"/2020/01/06/tool/Hexo外链播放器/","content":"Web Bookmark MetingJS仓库 Add MetingJS在页面上引入下列 css 和 js 文件 123456&lt;!-- require APlayer --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;&lt;!-- require MetingJS --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;&gt;&lt;/script&gt; 如何在 markdown 中使用 1234567891011# 网易云音乐 歌单&lt;meting-js\tserver=&quot;netease&quot;\ttype=&quot;playlist&quot;\tid=&quot;60198&quot;&gt;&lt;/meting-js&gt;# QQ音乐&lt;meting-js\tauto=&quot;https://y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;&gt;&lt;/meting-js&gt; 页面上的显示效果 以QQ音乐为例","tags":["Hexo","Music Player"],"categories":["Build Blog"]},{"title":"💖Hexo+GitHub配置保姆版（二）","path":"/2020/01/06/how-to-build-a-blog-site/Hexo-GitHub-2/","content":"Hexo官网里面有都文档说明，首先打开 Git Bash，先定位到你要放博客的文件夹，建议不要那种需要管理员权限才能新建文件的文件夹，我自己是在 D:\\My-blog 里 Install HexoHexo官网里面有都文档说明，首先打开 Git Bash ，先定位到你要放博客的文件夹，建议不要那种需要管理员权限才能新建文件的文件夹，我自己是在D:\\My-blog里 1cd 文件夹 这样就定为到了 D:\\My-blog，然后开始安装 Hexo 1npm install -g hexo-cli 安装好 Hexo，输入： 1hexo 如果出现以下这图就说明你的 Hexo 安装成功 Init your blog folder123456# 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字，不要傻fufu的把&lt;&gt;也打上去hexo init &lt;folder&gt;# 进入博客文件夹，&lt;folder&gt;为文件夹的名称cd &lt;folder&gt;# node.js的命令，根据博客既定的dependencies配置安装所有的依赖包npm install 安装完成后，你的文件夹里就会变成这样 这里的 _config.yml 是你的站点配置文件，你可以打开它修改你的站点信息（每个：后面都有一个空格） repo中填入你的仓库地址 123456url: http://yoursite.com # 把这个改成你的github地址（例如：http://kongvalley.github.io）deploy: type: git repo: git@github.com:KongValley/KongValley.github.io.git branch: master 新建文章 12# 新建文章hexo new &quot;文章标题&quot; 新建的 markdown 文件会在 source/_posts 中 1234# 进行本地浏览博客# 在Hexo 3.0 后server被单独出来了，需要安装servernpm install hexo-server --savehexo s 在浏览器中输入 http://localhost:4000/ ，你就能看到自己的博客了 Publish blog12345# 将你的博客发布到你的gtihub主页上# 在Hexo 3.0版本后deploy git被分开的，需要安装deploy gitnpm install hexo-deployer-git --savehexo ghexo deploy 你就可以登录你的 http://xxxxxxx.github.io 看看自己的博客了","tags":["Hexo","GitHub Page"],"categories":["Build Blog"]},{"title":"💛Hexo+GitHub配置保姆版（一）","path":"/2020/01/06/how-to-build-a-blog-site/Hexo-GitHub-1/","content":"注册Github帐号点击 这里，直接 sign up 注册，填完 step1 里的信息之后，直接下一步下一步，等下你注册时用的邮箱会收到一封来自 Github 的验证邮件，验证完成后，点击导航条右边的 + 点击红圈的这个按钮后，我用的是我自己的号做的示范，然后在 Repository name 这里填 你的用户名.github.io ，我自己的就是 KongValley.github.io，然后点 Create repository ，你就建好了一个 GitHub 仓库 Install Git点击这里找到适合自己电脑系统的安装包，安装过程也挺简单的，一直点 next 就好了 Install Node.js点击这里找到适合自己电脑系统的安装包，这个和上面安装Git一样简单，一直 next Deploy SSH安装好了 Git 后，你在你程序里应该能找到这个 Git Bash 程序 点击它，跳出一个命令窗口 直接输入： 1ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 然后一路回车，如果你是Windows用户的话，你会在你的 C:\\Users\\admin.ssh 里找到 id_rsa 和 id_rsa.pub 两个文件，用记事本打开 id_rsa.pub 文件，Ctrl+A全选复制里面的内容，然后点击这里，给你的仓库添加 SSH keys","tags":["Hexo","GitHub Page"],"categories":["Build Blog"]}]